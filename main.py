#! /Users/tsuno/.pyenv/shims/python3
# -*- coding: utf-8 -*-
#
# generated by wxGlade 0.9.6 on Thu Oct 29 22:41:10 2020
#

import numpy, matplotlib
if matplotlib.__version__ < '2.2':
    raise ValueError("Minimum Matplotlib version required: 2.2")

#
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas

#
import matplotlib.patches as patches

#
#import aijRc
#
import stiffner
import steel

import wx
import os
import csv
#import pandas as pd
import linecache
#from shutil import make_archive

# read from glade
import gui_stiff

# excel format
#import openpyxl
#from openpyxl.utils import get_column_letter # 列幅の指定 2020/05/27

# pdf export
import report

#import plate
# begin wxGlade: extracode
# end wxGlade


class MyFrame2(gui_stiff.MyFrame2):

    def OnClear(self,event):
        self.Clear_R()

    def Clear_R(self):
        # Check ',' include or not
        title = self.text_ctrl_title.GetValue()
        subTitle = self.text_ctrl_subtitle.GetValue()
        if ',' in title:
            dlg = wx.MessageDialog(self, 'You can\'t input "," to title tab',
                                   'Input Error',
                                   wx.OK | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()
        if ',' in subTitle:
            dlg = wx.MessageDialog(self, 'You can\'t input "," to sub title tab',
                                   'Input Error',
                                   wx.OK | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()
        #
        #
        self.text_ctrl_sa.SetValue("")
        self.text_ctrl_ff.SetValue("")
        #
        # HTB
        self.text_ctrl_e.SetValue("")
        self.text_ctrl_mm.SetValue("")
        self.text_ctrl_qvbyn.SetValue("")
        self.text_ctrl_ffbyn.SetValue("")
        self.text_ctrl_zb.SetValue("")
        self.text_ctrl_mmbyzb.SetValue("")
        self.text_ctrl_qb.SetValue("")
        self.text_ctrl_qa.SetValue("")
        self.text_ctrl_qbbyqa.SetValue("")
        self.text_ctrl_htbjudge.SetValue("")
        #
        # Gasset Plate
        self.text_ctrl_e2.SetValue("")
        self.text_ctrl_mm2.SetValue("")
        self.text_ctrl_reqd.SetValue("")
        # Stud bolt
        self.text_ctrl_qs.SetValue("")
        self.text_ctrl_qe.SetValue("")
        self.text_ctrl_qebyqs.SetValue("")
        # stiffness
        self.text_ctrl_dm.SetValue("")
        self.text_ctrl_dv.SetValue("")
        self.text_ctrl_dtotal.SetValue("")
        self.text_ctrl_kk.SetValue("")
        self.text_ctrl_kd.SetValue("")
        self.text_ctrl_kdbykk.SetValue("")
        self.text_ctrl_kdjudge.SetValue("")
        #

    def HShape(self):
        outFile = './db/H_Shape.csv'
        index = 0
        with open(outFile, encoding='utf-8') as f:
            for row in csv.reader(f):
                self.list_ctrl_db.InsertItem(index, index)
                self.list_ctrl_db.SetItem(index, 0, row[0])
                self.list_ctrl_db.SetItem(index, 1, row[1])
                index += 1
        f.close()

    def OnBeam(self,event):
        # read
        id_show = self.list_ctrl_db.GetFirstSelected() + 1
        line = linecache.getline('./db/H_Shape.csv', id_show )
        data = line.split(',')
        # test
        # output
        self.text_ctrl_hh1.SetValue(data[3])
        self.text_ctrl_bb1.SetValue(data[4])
        self.text_ctrl_tw1.SetValue(data[5])
        self.text_ctrl_tf1.SetValue(data[6])
        data[7] = data[7].replace('\n',"")
        self.text_ctrl_rr1.SetValue(data[7])
        linecache.clearcache()
        #

    def OnSubBeam(self,event):
        # read
        id_show = self.list_ctrl_db.GetFirstSelected() + 1
        line = linecache.getline('./db/H_Shape.csv', id_show )
        data = line.split(',')
        # test
        # output
        self.text_ctrl_hh2.SetValue(data[3])
        self.text_ctrl_bb2.SetValue(data[4])
        self.text_ctrl_tw2.SetValue(data[5])
        self.text_ctrl_tf2.SetValue(data[6])
        data[7] = data[7].replace('\n',"")
        self.text_ctrl_rr2.SetValue(data[7])
        linecache.clearcache()
        #

    def ListShow(self):
        self.list_ctrl_output.DeleteAllItems();
        idTotal = self.text_ctrl_idView.GetValue()
        outFile = './db/rcslab.txt'
        index = 0
        if idTotal != '0':
            with open(outFile, encoding='utf-8') as f:
                for row in csv.reader(f):
                    self.list_ctrl_output.InsertItem(index, index)
                    self.list_ctrl_output.SetItem(index, 0, str(int(index+1)))
                    self.list_ctrl_output.SetItem(index, 1, row[0])
                    self.list_ctrl_output.SetItem(index, 2, row[1])
                    index += 1
            f.close()
    # Remove Button

    def OnMove(self,event):

        # read
        idTotal = int(self.text_ctrl_idTotal.GetValue())
        id_move1 = int(self.text_ctrl_move1.GetValue())
        id_move2 = int(self.text_ctrl_move2.GetValue())
        data = []

        f = open('./db/rcslab.txt', encoding='utf-8')

        for i in range(0,idTotal):
            line = f.readline()
            data.append(line)
        f.close()

        outFile = './db/rcslab.txt'
        fout = open(outFile, "w", encoding='utf-8')

        if id_move2 < id_move1:
            for i in range(0,idTotal):
                if id_move2 == i+1:
                    fout.writelines(str(data[id_move1-1]))
                if id_move1 != i+1:
                    fout.writelines(str(data[i]))
        else:
            for i in range(0,idTotal):
                if id_move1 != i+1:
                    fout.writelines(str(data[i]))
                if id_move2 == i+1:
                    fout.writelines(str(data[id_move1-1]))

        fout.close()

        # output
        self.ListShow()

    def OnRemove(self,event):


        if self.text_ctrl_remove.GetValue() == '':
            print(self.text_ctrl_remove.GetValue())
            dlg = wx.MessageDialog(self, 'Pls, input Remove No.',
                                   'Error',
                                   wx.OK | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()

        else:
            # read
            idTotal = int(self.text_ctrl_idTotal.GetValue())
            id_remove = int(self.text_ctrl_remove.GetValue())

            data = []

            f = open('./db/rcslab.txt', encoding='utf-8')

            for i in range(0,idTotal):
                line = f.readline()
                data.append(line)
            f.close()

            outFile = './db/rcslab.txt'
            fout = open(outFile, "w", encoding='utf-8')

            for i in range(0,idTotal):
                if id_remove != i+1:
                    fout.writelines(str(data[i]))

            fout.close()

            # output
            self.text_ctrl_idTotal.SetValue( str(idTotal-1))
            self.ListShow()

    def SubShow(self,data):

        # substitute
        title = data[0]
        subTitle = data[1]
        # Member size
        hh1 = data[2]
        bb1 = data[3]
        tw1 = data[4]
        tf1 = data[5]
        rr1 = data[6]
        # Sub Beam Member size
        hh2 = data[7]
        bb2 = data[8]
        tw2 = data[9]
        tf2 = data[10]
        rr2 = data[11]
        #
        ll  = data[12]
        ds  = data[13]
        #
        # Condition
        ## By Combo
        bound   = data[14]
        fixtype = data[15]
        ##
        qv = data[16]
        lb = data[17]
        fac = data[18]
        studfac = data[19]
        #
        # Connection
        htbsize  = data[20]
        friction = data[21]
        #
        n21 = data[22]
        n22 = data[23]
        n23 = data[24]
        #
        xpitch = data[25]
        ypitch = data[26]
        htbe   = data[27]
        #
        tg  = data[28]
        gassettype  = data[29]
        stud  = data[30]
        #
        # Material
        sigy1 = data[31]
        sigy2 = data[32]
        sigyg = data[33]
        htbm = data[34]
        #
        conc = data[35]
        fc   = data[36]
        gamma = data[37]

        # Slab Condition
        #
        # Title
        self.text_ctrl_title.SetValue(title)
        self.text_ctrl_subtitle.SetValue( subTitle)

        # Beam Member size
        self.text_ctrl_hh1.SetValue(hh1 )
        self.text_ctrl_bb1.SetValue(bb1 )
        self.text_ctrl_tw1.SetValue(tw1 )
        self.text_ctrl_tf1.SetValue(tf1 )
        self.text_ctrl_rr1.SetValue(rr1 )
        # Sub Beam Member size
        self.text_ctrl_hh2.SetValue(hh2 )
        self.text_ctrl_bb2.SetValue(bb2 )
        self.text_ctrl_tw2.SetValue(tw2 )
        self.text_ctrl_tf2.SetValue(tf2 )
        self.text_ctrl_rr2.SetValue(rr2 )
        #
        self.text_ctrl_ll.SetValue(ll  )
        self.text_ctrl_ds.SetValue(ds  )
        #
        # Condition
        ## By Combo
        self.combo_box_bound.SetSelection(int(bound)   )
        self.combo_box_fixtype.SetSelection(int(fixtype) )
        ##
        self.text_ctrl_qv.SetValue(qv )
        self.text_ctrl_lb.SetValue(lb )
        self.text_ctrl_fac.SetValue(fac )
        self.text_ctrl_studfac.SetValue(studfac )
        #
        # Connection
        self.combo_box_htbsize.SetValue(htbsize  )
        self.combo_box_friction.SetValue(friction )
        #
        self.text_ctrl_n21.SetValue(n21 )
        self.text_ctrl_n22.SetValue(n22 )
        self.text_ctrl_n23.SetValue(n23 )
        #
        self.text_ctrl_xpitch.SetValue(xpitch )
        self.text_ctrl_ypitch.SetValue(ypitch )
        self.text_ctrl_htbe.SetValue(htbe   )
        #
        self.text_ctrl_tg.SetValue(tg  )
        self.combo_box_gassettype.SetValue(gassettype  )
        self.combo_box_stud.SetValue(stud  )
        #
        # Material
        self.text_ctrl_sigy1.SetValue(sigy1 )
        self.text_ctrl_sigy2.SetValue(sigy2 )
        self.text_ctrl_sigyg.SetValue(sigyg )
        self.combo_box_htbm.SetValue(htbm )
        #
        self.combo_box_conc.SetValue(conc )
        self.text_ctrl_fc.SetValue(fc )
        self.text_ctrl_gamma.SetValue(gamma )


    # Show Button
    ####################
    def OnShow(self,event):

        # read
        id_show = self.list_ctrl_output.GetFirstSelected() + 1
        line = linecache.getline('./db/rcslab.txt', id_show )
        data = line.split(', ')
        # test
        """
        print('Id = ' + str(id_show))
        print('line' + line)
        print(data)
        """
        # output
        idView = id_show
        self.text_ctrl_idView.SetValue(str(idView))
        self.SubShow(data)
        linecache.clearcache()
        #
        # output remove and move
        self.text_ctrl_remove.SetValue(str(idView))
        self.text_ctrl_move1.SetValue(str(idView))
        #
        #
        #self.OnChangeBound(event)
        self.OnCal(event)

    # Header Button
    def OnPre(self,event):

        # read
        id_show = int(self.text_ctrl_idView.GetValue())
        idTotal = int(self.text_ctrl_idTotal.GetValue())
        #
        if id_show == 1 :
            id_show_next = idTotal
        else:
            id_show_next = id_show - 1

        self.text_ctrl_idView.SetValue(str(id_show_next))
        line = linecache.getline('./db/rcslab.txt', id_show_next )
        data = line.split(', ')
        self.SubShow(data)
        linecache.clearcache()
        self.OnCal(event)

    def OnNext(self,event):

        # read
        id_show = int(self.text_ctrl_idView.GetValue())
        idTotal = int(self.text_ctrl_idTotal.GetValue())
        #
        if id_show >= idTotal :
            id_show_next = 1
        else:
            id_show_next = id_show + 1

        self.text_ctrl_idView.SetValue(str(id_show_next))
        line = linecache.getline('./db/rcslab.txt', id_show_next )
        data = line.split(', ')
        self.SubShow(data)
        linecache.clearcache()
        self.OnCal(event)


    def OnPlus(self,event):
        idTotal = int(self.text_ctrl_idTotal.GetValue())
        id_View = idTotal + 1
        self.text_ctrl_idView.SetValue(str(id_View))
        self.Clear_R()
        self.text_ctrl_title.SetValue('No.'+str(id_View))

    def OnQuit(self, event):
        self.Close()


    def OnStore(self,event):

        #
        idView  = self.text_ctrl_idView.GetValue()
        idTotal = self.text_ctrl_idTotal.GetValue()
        #
        ####################
        data = []
        data = self.input_parameter(0)
        #
        ####################
        outFile = './db/rcslab.txt'
        if idTotal == '0':
            fout = open(outFile, "w", encoding='utf-8')
        else:
            fout = open(outFile, "a", encoding='utf-8')

        for i in range(len(data)):
            fout.writelines(str(data[i]))
            fout.writelines(', ')
        fout.writelines('\n')
        fout.close()

        #idView_next = int(idView) + 1
        idView_next = int(idTotal) + 2
        idTotal_next = int(idTotal) + 1
        self.text_ctrl_idView.SetValue(str(idView_next))
        self.text_ctrl_idTotal.SetValue(str(idTotal_next))
        #
        self.text_ctrl_title.SetValue('No.'+str(idView_next))
        #

        self.ListShow()
        self.Clear_R()

        # Pandas Check
        #df = pd.read_csv("./db/rcslab.txt")
        #print(df)


    # Make report
    def OnReport(self,event):

        with wx.FileDialog(self, "Save Pdf File", wildcard="Input File (*.pdf)|*.pdf",
                           style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT) as fileDialog:
            if fileDialog.ShowModal() == wx.ID_CANCEL:
                return     # the user changed their mind
            # save the current contents in the file
            pathname = fileDialog.GetPath() # pdf file

            try:
                num = int( self.text_ctrl_idTotal.GetValue() )
                print(num)
                title = "none"
                #for i in range(0,num):
                obj = report.Report()
                obj.create_pdf(num,pathname,title)
                del obj
            except IOError:
                wx.LogError("Cannot save current data in file '%s'." % pathname)


    # Export Csv Sheet
    ########################################################################
    def OnExport(self,event):
        with wx.FileDialog(self, "Save Csv File", wildcard="Output File (*.csv)|*.csv",
                           style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT) as fileDialog:
            if fileDialog.ShowModal() == wx.ID_CANCEL:
                return     # the user changed their mind
            # save the current contents in the file
            pathname = fileDialog.GetPath()
            try:
                input_path = './db/rcslab.txt'
                with open(input_path, encoding='utf-8') as f:
                    s = f.read()
                with open(pathname, 'w', encoding='utf-8') as file:
                    file.write(s)
            except IOError:
                wx.LogError("Cannot save current data in file '%s'." % pathname)


    # Import Csv Sheet
    ########################################################################
    def OnImport(self,event):
        with wx.FileDialog(self, "Open Input csv file", wildcard="Input files (*.csv)|*.csv",
                           style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST) as fileDialog:

            if fileDialog.ShowModal() == wx.ID_CANCEL:
                return     # the user changed their mind
            # save the current contents in the file
            pathname = fileDialog.GetPath()
            try:
                with open(pathname, encoding='utf-8') as f:
                    s = f.read()

                input_path = './db/rcslab.txt'
                with open(input_path, 'w', encoding='utf-8') as file:
                    file.write(s)

                # Listの読み込み
                line_count = 0
                with open(input_path, encoding='utf-8') as f:
                    for line in f:
                        line_count += 1
                print("Success Import!!!")

                self.text_ctrl_idTotal.SetValue(str(line_count))
                #self.text_ctrl_idView.SetValue(str(1))
                self.ListShow()
                self.list_ctrl_output.Select(0)
                self.OnShow(event)

            except IOError:
                wx.LogError("Cannot import current data in file '%s'." % pathname)



    def OnCal(self, event):  # wxGlade: MyFrame.<event_handler>

        # Read Data
        ########################################################################
        title,subTitle,\
            hh1,bb1,tw1,tf1,rr1,\
            hh2,bb2,tw2,tf2,rr2,\
            ll,ds,\
            bound,fixtype,\
            qv,lb,fac,studfac,\
            htbsize,friction,\
            n21,n22,n23,\
            xpitch,ypitch,htbe,\
            tg,gassettype,stud,\
            sigy1,sigy2,sigyg,htbm,\
            conc,fc,gamma\
            = self.input_parameter(1)

        """
        # test
        print(title)
        print(subTitle)
        print(hh1,bb1,tw1,tw1,rr1)
        print(hh2,bb2,tw2,tw2,rr2)
        print(ll  )
        print(bound   )
        print(fixtype )
        print(qv )
        print(lb )
        print(fac )
        print(studfac )
        print(htbsize  )
        print(friction )
        print(n21 )
        print(n22 )
        print(n23 )
        print(xpitch )
        print(ypitch )
        print(htbe   )
        print(tg  )
        print(gassettype  )
        print(stud  )
        print(sigy1 )
        print(sigy2 )
        print(sigyg )
        print(htbm )
        print(conc )
        print(fc )
        print(gamma )
        """

        # Preparation
        qa = steel.HTB().qa(htbsize,htbm)*1.5
        qs = steel.Stud().qs(fc,gamma,stud,studfac)

        # Calculation
        obj = stiffner.Stiffner()
        obj.makeModel(n21,n22,n23,xpitch,ypitch)
        sa, ff, e, mm, m, zb, qvbar, nnbar, qbmax, \
            e2,mdg,reqd, qe,\
            dm,dv,dtotal,kk = \
                obj.solve(hh1,bb1,tw1,tf1,rr1,fac,sigy1,\
                          hh2,bb2,tw2,tf2,rr2,ds,\
                          n21,n22,n23,\
                          xpitch,ypitch,\
                          htbsize,\
                          qv,\
                          bound,fixtype,\
                          tg,sigyg,\
                          ll)

        mmbyzb = mm/zb*1000

        # calculation of the stiffness
        kd = stiffner.Stiffner().kd(hh1,bb1,tw1,tf1,rr1,sigy1,lb)
        #self.OnModel(event)
        # output to gui
        ########################################################################
        sfqb = qbmax/qa
        sfkd = kd/kk
        sfqe = qe/qs

        # テキスト出力
        self.output(sa,ff,e,mm,qvbar,nnbar,zb,mmbyzb,qbmax,qa,sfqb,\
                    e2,mdg,reqd,qs,qe,sfqe,\
                    dm,dv,dtotal,kk,kd,sfkd)

        # モデル出力
        self.OnModel(event)

        # classの終了
        del obj

    def input_parameter(self,kata):

        # kata ==  0 そのまま
        # kata ==  1 型を変換してパラメーターを返す。

        title = self.text_ctrl_title.GetValue()
        subTitle = self.text_ctrl_subtitle.GetValue()
        # Beam Member size
        hh1 = ( self.text_ctrl_hh1.GetValue() )
        bb1 = ( self.text_ctrl_bb1.GetValue() )
        tw1 = ( self.text_ctrl_tw1.GetValue() )
        tf1 = ( self.text_ctrl_tf1.GetValue() )
        rr1 = ( self.text_ctrl_rr1.GetValue() )
        # Sub Beam Member size
        hh2 = ( self.text_ctrl_hh2.GetValue() )
        bb2 = ( self.text_ctrl_bb2.GetValue() )
        tw2 = ( self.text_ctrl_tw2.GetValue() )
        tf2 = ( self.text_ctrl_tf2.GetValue() )
        rr2 = ( self.text_ctrl_rr2.GetValue() )
        #
        ll  = ( self.text_ctrl_ll.GetValue() )
        ds  = ( self.text_ctrl_ds.GetValue() )
        #
        # Condition
        ## By Combo
        bound   = self.combo_box_bound.GetSelection()
        fixtype = self.combo_box_fixtype.GetSelection()
        ##
        qv = ( self.text_ctrl_qv.GetValue() )
        lb = ( self.text_ctrl_lb.GetValue() )
        fac = ( self.text_ctrl_fac.GetValue() )
        studfac = ( self.text_ctrl_studfac.GetValue() )
        #
        # Connection
        htbsize  = self.combo_box_htbsize.GetValue()
        friction = self.combo_box_friction.GetValue()
        #
        n21 = ( self.text_ctrl_n21.GetValue() )
        n22 = ( self.text_ctrl_n22.GetValue() )
        n23 = ( self.text_ctrl_n23.GetValue() )
        #
        xpitch = ( self.text_ctrl_xpitch.GetValue() )
        ypitch = ( self.text_ctrl_ypitch.GetValue() )
        htbe   = ( self.text_ctrl_htbe.GetValue() )
        #
        tg  = ( self.text_ctrl_tg.GetValue() )
        gassettype  = self.combo_box_gassettype.GetValue()
        stud  = (self.combo_box_stud.GetValue())
        #
        # Material
        sigy1 = ( self.text_ctrl_sigy1.GetValue() )
        sigy2 = ( self.text_ctrl_sigy2.GetValue() )
        sigyg = ( self.text_ctrl_sigyg.GetValue() )
        htbm = self.combo_box_htbm.GetValue()
        #
        conc = self.combo_box_conc.GetValue()
        fc = ( self.text_ctrl_fc.GetValue() )
        gamma = ( self.text_ctrl_gamma.GetValue() )

        if kata == 1 :
            #title = self.text_ctrl_title.GetValue()
            #subTitle = self.text_ctrl_subtitle.GetValue()
            # Beam Member size
            hh1 = float( hh1 )
            bb1 = float( bb1 )
            tw1 = float( tw1 )
            tf1 = float( tf1 )
            rr1 = float( rr1 )
            # Sub Beam Member size
            hh2 = float( hh2 )
            bb2 = float( bb2 )
            tw2 = float( tw2 )
            tf2 = float( tf2 )
            rr2 = float( rr2 )
            #
            ll  = float( ll )
            ds  = float( ds )
            #
            # Condition
            ## Combo
            #bound   = self.combo_box_bound.GetSelection()
            #fixtype = self.combo_box_fixtype.GetSelection()
            ## float
            qv = float( qv )
            lb = float( lb )
            fac = float( fac )
            studfac = float( studfac )
            #
            # Connection
            #htbsize  = self.combo_box_htbsize.GetValue()
            #friction = self.combo_box_friction.GetValue()
            #
            n21 = int( n21 )
            n22 = int( n22 )
            n23 = int( n23 )
            #
            xpitch = float( xpitch )
            ypitch = float( ypitch )
            htbe   = float( htbe )
            #
            tg  = float( tg )
            #gassettype  = self.combo_box_gassettype.GetValue()
            stud  = float(stud)
            #
            # Material
            sigy1 = float( sigy1 )
            sigy2 = float( sigy2 )
            sigyg = float( sigyg )
            #htbm = self.combo_box_htbm.GetValue()
            #
            #conc = self.combo_box_conc.GetValue()
            fc = float( fc )
            gamma = float( gamma )

            return title,subTitle,\
                hh1,bb1,tw1,tf1,rr1,\
                hh2,bb2,tw2,tf2,rr2,\
                ll,ds,\
                bound,fixtype,\
                qv,lb,fac,studfac,\
                htbsize,friction,\
                n21,n22,n23,\
                xpitch,ypitch,htbe,\
                tg,gassettype,stud,\
                sigy1,sigy2,sigyg,htbm,\
                conc,fc,gamma

        elif kata == 0 :

            sa = self.text_ctrl_sa.GetValue()
            ff = self.text_ctrl_ff.GetValue()
            #
            # HTB
            e        = self.text_ctrl_e.GetValue()
            mm       = self.text_ctrl_mm.GetValue()
            qvbar    = self.text_ctrl_qvbyn.GetValue()
            nnbar    = self.text_ctrl_ffbyn.GetValue()
            zb       = self.text_ctrl_zb.GetValue()
            mmbyzb   = self.text_ctrl_mmbyzb.GetValue()
            qbmax    = self.text_ctrl_qb.GetValue()
            qa       = self.text_ctrl_qa.GetValue()
            sfqb     = self.text_ctrl_qbbyqa.GetValue()
            htbjudge = self.text_ctrl_htbjudge.GetValue()
            #
            # Gasset Plate
            e2       = self.text_ctrl_e2.GetValue()
            mdg      = self.text_ctrl_mm2.GetValue()
            reqd     = self.text_ctrl_reqd.GetValue()
            # Stud bolt
            qs       = self.text_ctrl_qs.GetValue()
            qe       = self.text_ctrl_qe.GetValue()
            sfqe     = self.text_ctrl_qebyqs.GetValue()
            # stiffness
            dm       = self.text_ctrl_dm.GetValue()
            dv       = self.text_ctrl_dv.GetValue()
            dtotal   = self.text_ctrl_dtotal.GetValue()
            kk       = self.text_ctrl_kk.GetValue()
            kd       = self.text_ctrl_kd.GetValue()
            sfkd     = self.text_ctrl_kdbykk.GetValue()
            kdjudge  = self.text_ctrl_kdjudge.GetValue()

            return title,subTitle,\
                hh1,bb1,tw1,tf1,rr1,\
                hh2,bb2,tw2,tf2,rr2,\
                ll,ds,\
                bound,fixtype,\
                qv,lb,fac,studfac,\
                htbsize,friction,\
                n21,n22,n23,\
                xpitch,ypitch,htbe,\
                tg,gassettype,stud,\
                sigy1,sigy2,sigyg,htbm,\
                conc,fc,gamma,\
                sa,ff,e,mm,qvbar,nnbar,zb,mmbyzb,qbmax,qa,sfqb,htbjudge,\
                e2,mdg,reqd,\
                qs,qe,sfqe,\
                dm,dv,dtotal,kk,kd,sfkd,kdjudge

        else:
            print("Error, def input_parameter, kata == ???" )


    def output(self,sa,ff,e,mm,qvbar,nnbar,zb,mmbyzb,qbmax,qa,sfqb,\
               e2,mdg,reqd,qs,qe,sfqe,\
               dm,dv,dtotal,kk,kd,sfkd):
        ####################
        # 出力
        #
        self.text_ctrl_sa.SetValue("{:.0f}".format(sa))
        self.text_ctrl_ff.SetValue("{:.1f}".format(ff))
        #
        # HTB
        self.text_ctrl_e.SetValue("{:.2f}".format(e))
        self.text_ctrl_mm.SetValue("{:.1f}".format(mm))
        self.text_ctrl_qvbyn.SetValue("{:.1f}".format(qvbar))
        self.text_ctrl_ffbyn.SetValue("{:.1f}".format(nnbar))
        self.text_ctrl_zb.SetValue("{:.2f}".format(zb/1000))
        self.text_ctrl_mmbyzb.SetValue("{:.1f}".format(mmbyzb))
        self.text_ctrl_qb.SetValue("{:.1f}".format(qbmax))
        self.text_ctrl_qa.SetValue("{:.1f}".format(qa))
        self.text_ctrl_qbbyqa.SetValue("{:.2f}".format(sfqb))

        if sfqb == "":
            self.text_ctrl_htbjudge.SetValue("")
        else:
            if sfqb <= 1.0:
                self.text_ctrl_htbjudge.SetValue("OK")
            else:
                self.text_ctrl_htbjudge.SetValue("NG")
        #
        # Gasset Plate
        self.text_ctrl_e2.SetValue("{:.2f}".format(e2))
        self.text_ctrl_mm2.SetValue("{:.1f}".format(mdg))
        self.text_ctrl_reqd.SetValue("{:.0f}".format(reqd))
        # Stud bolt
        self.text_ctrl_qs.SetValue("{:.1f}".format(qs))
        self.text_ctrl_qe.SetValue("{:.1f}".format(qe))
        self.text_ctrl_qebyqs.SetValue("{:.1f}".format(sfqe))
        # stiffness
        self.text_ctrl_dm.SetValue("{:.2f}".format(dm))
        self.text_ctrl_dv.SetValue("{:.2f}".format(dv))
        self.text_ctrl_dtotal.SetValue("{:.2f}".format(dtotal))
        self.text_ctrl_kk.SetValue("{:.0f}".format(kk))
        self.text_ctrl_kd.SetValue("{:.0f}".format(kd))
        self.text_ctrl_kdbykk.SetValue("{:.2f}".format(sfkd))
        if sfkd == "":
            self.text_ctrl_kdjudge.SetValue("")
        else:
            if sfkd <= 1.0:
                self.text_ctrl_kdjudge.SetValue("OK")
            else:
                self.text_ctrl_kdjudge.SetValue("NG")

    def htb_size( self, x):

        if x == "M12":
            return 12
        elif x == "M16":
            return 16
        elif x == "M20":
            return 16
        elif x == "M22":
            return 16
        elif x == "M27":
            return 16

    def OnModel(self,event):

        self.matplotlib_axes.clear()
        self.matplotlib_canvas.draw()

        obj = stiffner.Stiffner()

        # imput data
        # Beam Member size
        hh = float( self.text_ctrl_hh1.GetValue() )
        bb = float( self.text_ctrl_bb1.GetValue() )
        tw = float( self.text_ctrl_tw1.GetValue() )
        tf = float( self.text_ctrl_tf1.GetValue() )
        rr = float( self.text_ctrl_rr1.GetValue() )
        # Sub Beam Member size
        hh2 = float( self.text_ctrl_hh2.GetValue() )
        bb2 = float( self.text_ctrl_bb2.GetValue() )
        tw2 = float( self.text_ctrl_tw2.GetValue() )
        tf2 = float( self.text_ctrl_tf2.GetValue() )
        rr2 = float( self.text_ctrl_rr2.GetValue() )
        #
        ds  = float( self.text_ctrl_ds.GetValue() )
        #
        n21 = int( self.text_ctrl_n21.GetValue() )
        n22 = int( self.text_ctrl_n22.GetValue() )
        n23 = int( self.text_ctrl_n23.GetValue() )
        #
        xpitch = float( self.text_ctrl_xpitch.GetValue() )
        ypitch = float( self.text_ctrl_ypitch.GetValue() )
        htbe   = float( self.text_ctrl_htbe.GetValue() )
        #
        htbsize  = self.combo_box_htbsize.GetValue()
        size = self.htb_size(htbsize)

        obj.makeModel(n21,n22,n23,xpitch,ypitch)

        #obj_canvas = self.matplotlib_
        #obj_axes = self.matplotlib_axes

        #x = 0.0
        #y = 0.0
        #self.matplotlib_axes.plot(x,y)
        #boj_canvas.draw()

        plt = matplotlib.pyplot
        fig = plt.figure()
        ax = self.matplotlib_axes

        # fc = face color, ec = edge color

        c = []
        yaxis = hh - ( ds + hh2/2 + (n21-1)*ypitch/2.0 )


        totalnum = n21+n22+n23
        #print(totalnum)
        xpos = obj.return_xpos()
        #print(xpos)

        ypos = obj.return_ypos()
        #print(ypos)


        for i in range(0,int(totalnum)):
            print(i,xpos[i],ypos[i])
            xposnew = xpos[i] + bb + 10.0 + size + 2 + htbe
            yposnew = yaxis + ypos[i]
            c.append(patches.Circle(xy=(xposnew,yposnew),radius=size/2.0, fc='g', ec='r'))

        r = patches.Rectangle(xy=(0, 0), width=bb, height=tf, \
                              ec='#000000', fill=False)
        r2 = patches.Rectangle(xy=(bb/2-tw/2, tf), width=tw, height=(hh-2*tf), \
                               ec='#000000', fill=False)
        r3 = patches.Rectangle(xy=(0, hh-tf), width=bb, height=tf, \
                               ec='#000000', fill=False)


        subbeam = []
        subbeam.append( \
                        patches.Rectangle(xy=(bb+10.0, hh-ds-hh2), width=600, height=hh2, \
                                          ec='#000000', fill=False) )
        subbeam.append( \
                        patches.Rectangle(xy=(bb+10.0, hh-ds-hh2), width=600, height=tf2, \
                                          ec='#000000', fill=False) )
        subbeam.append( \
                        patches.Rectangle(xy=(bb+10.0, hh-ds-tf2), width=600, height=tf2, \
                                          ec='#000000', fill=False) )

        for i in range(0,int(totalnum)):
            ax.add_patch(c[i])

        ax.add_patch(r)
        ax.add_patch(r2)
        ax.add_patch(r3)

        for i in range(0,3):
            ax.add_patch(subbeam[i])

        #plt.axis('scaled')
        ax.axis('scaled')
        ax.set_aspect('equal')
        ax.axis("off")
        # 範囲を指定する場合はコメントをとる。
        """
        ax.set_ylim(hh-1450, hh+50)
        ax.set_xlim(-50, 1500)
        """

        #plt.savefig('./db/sample.jpg')
        #
        #self.matplotlib_axes.plot(x,y)
        self.matplotlib_canvas.draw()
        del obj
        event.Skip()

        #plt.show()
        #plt.close(fig)
        #obj.draw()

    """
    def OnDB(self,event):
        MyFrame3(None, wx.ID_ANY, "").Show()
        #MyFrame3.ListShow()
        return True

class MyFrame3(gui_stiff.MyFrame3):

    #self.ListShow()

    def OnCal(self,event):
        print("Hello")
        MyFrame2.text_ctrl_title.SetValue("Hello")

    def ListShow(self):
        #self.list_ctrl_output.DeleteAllItems();
        #idTotal = self.text_ctrl_idView.GetValue()
        outFile = './db/H_Shape.csv'
        index = 0
        with open(outFile, encoding='utf-8') as f:
            for row in csv.reader(f):
                self.list_ctrl_db1.InsertItem(index, index)
                self.list_ctrl_db1.SetItem(index, 0, str(int(index+1)))
                self.list_ctrl_db1.SetItem(index, 1, row[0])
                self.list_ctrl_db1.SetItem(index, 2, row[1])
                index += 1
        f.close()
    """


class MyFrame(gui_stiff.MyFrame):

    def OnQuit(self, event):
        self.Close()

    def OnRcslab(self,event):
        MyFrame2(None, wx.ID_ANY, "").Show()
        return True

    def OnTest(self,event):
        MyFrame_test(None, wx.ID_ANY, "").Show()
        return True
"""
class MyFrame_test(gui.MyFrame_test):
    print('h')
"""

# end of class MyFrame

# end of class MyFrame

class MyApp(wx.App):

    def OnInit(self):
        new_dir_path = './db'
        try:
            os.mkdir(new_dir_path)
        except FileExistsError:
            pass
        #self.frame = MyFrame(None, wx.ID_ANY, "")
        self.frame = MyFrame2(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        #MyFrame2(None, wx.ID_ANY, "").
        self.frame.HShape()
        return True
# 上のふたつの#をとって、frameをコメントアウトすれば、ホーム画面を立ち上げる。
# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
